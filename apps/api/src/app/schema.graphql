### This file was generated by Nexus Schema
### Do not make changes to this file directly

type AuthPayload {
  accessToken: String!
  refreshToken: String!
}

type Category {
  createdAt: Date!
  id: Int!
  name: String!
  updatedAt: Date!
}

type Comment {
  author: SimpleUser!
  authorId: Int!
  createdAt: Date!
  id: Int!
  mentionProducts: [CommentMentionProduct!]
  mentionUsers: [CommentMentionUser!]
  product: SimpleProduct!
  productId: Int!
  text: String!
  updatedAt: Date!
  voted: Boolean
  votes: Int!
}

input CommentCreatedFields {
  mentionProducts: [CommentMentionProductCreatedFields!]
  mentionUsers: [CommentMentionUserCreatedFields!]
  productId: Int!
  text: String!
}

type CommentMentionProduct {
  createdAt: Date!
  id: Int!
  length: Int!
  link: String!
  name: String!
  offset: Int!
}

input CommentMentionProductCreatedFields {
  length: Int!
  offset: Int!
  productId: Int!
}

type CommentMentionUser {
  createdAt: Date!
  id: Int!
  length: Int!
  link: String!
  name: String!
  offset: Int!
}

input CommentMentionUserCreatedFields {
  length: Int!
  offset: Int!
  userId: Int!
}

type CursorMeta {
  cursor: Int!
  perPage: Int!
  total: Int!
}

type CursorPaginatedComments {
  data: [Comment!]!
  meta: CursorMeta!
}

type CursorPaginatedProducts {
  data: [Product!]!
  meta: CursorMeta!
}

type CursorPaginatedUsers {
  data: [User!]!
  meta: CursorMeta!
  self: User
}

scalar Date

enum Direction {
  asc
  desc
}

type Mutation {
  CreateComment(createdFields: CommentCreatedFields!): Comment
  CreateProduct(createdFields: ProductCreatedFields!): Product
  Follow(userId: Int!): StatusPayload
  PlatformLogin(email: String!, password: String!): AuthPayload
  RefreshAccessToken(refreshToken: String!): AuthPayload
  ResetPassword(code: String!, newPassword: String!): StatusPayload
  SendPasswordResettingMail(email: String!): StatusPayload
  SendVerifiedMail(
    email: String!
    password: String
    thirdPartyToken: String
    thirdPartyType: ThirdPartyType
  ): StatusPayload
  ThridPartyLogin(token: String!, type: ThirdPartyType!): AuthPayload
  Unfollow(userId: Int!): StatusPayload
  UnvoteComment(commentId: Int!): StatusPayload
  UnvoteProduct(productId: Int!): StatusPayload
  UpdateSetting(key: SettingKey!, value: Boolean!): Setting
  UpdateUser(updatedFields: UserUpdateFields!): User
  Upload(file: Upload!, type: UploadType!): UrlPayload
  View(productId: Int!): StatusPayload
  VoteComment(commentId: Int!): StatusPayload
  VoteProduct(productId: Int!): StatusPayload
}

type OffsetMeta {
  currentPage: Int!
  lastPage: Int!
  perPage: Int!
  total: Int!
}

type OffsetPaginatedProductGroups {
  data: [ProductGroup!]!
  meta: OffsetMeta!
}

type OffsetPaginatedProducts {
  data: [Product!]!
  meta: OffsetMeta!
}

type OffsetPaginatedSimpleUsers {
  data: [SimpleUser!]!
  meta: OffsetMeta!
}

type Product {
  categories: [Category!]!
  commentCount: Int!
  cover: String!
  createdAt: Date!
  customId: String!
  id: Int!
  images: [ProductImage!]
  intro: String!
  links: [ProductLink!]
  logo: String!
  name: String!
  officialLink: String!
  publisher: User
  tags: [Tag!]!
  updatedAt: Date!
  viProductCategorys: [ViProductCategory!]
  viProductTags: [ViProductTag!]
  views: Int!
  voted: Boolean
  votes: Int!
}

input ProductCreatedFields {
  categories: [Int!]
  cover: String!
  customId: String!
  images: [ProductImageCreatedFields!]
  intro: String!
  links: [ProductLinkCreatedFields!]
  logo: String!
  name: String!
  officialLink: String!
  publishedAt: String!
  publisherEmail: String!
  tags: [Int!]
}

input ProductFilter {
  categories: [Int!]
  search: String
  tags: [Int!]
}

type ProductGroup {
  data: [Product!]!
  groupedValue: String!
}

enum ProductGroupBy {
  day
  month
}

type ProductImage {
  id: Int!
  type: String!
  url: String!
}

input ProductImageCreatedFields {
  type: String!
  url: String!
}

type ProductLink {
  id: Int!
  type: String!
  url: String!
}

input ProductLinkCreatedFields {
  type: String!
  url: String!
}

input ProductOrderBy {
  direction: Direction!
  field: ProductOrderByField!
}

enum ProductOrderByField {
  publishedAt
  views
  votes
}

type Query {
  AllComments(productCustomId: String!): [Comment]
  Categories: [Category]
  Comments(
    cursor: Int! = 0
    perPage: Int! = 15
    productCustomId: String!
  ): CursorPaginatedComments
  FilterCategories(search: String!): [Category]
  FilterTags(search: String!): [Tag]
  Followers(
    cursor: Int! = 0
    customId: String!
    perPage: Int! = 15
  ): CursorPaginatedUsers
  Followings(
    cursor: Int! = 0
    customId: String!
    perPage: Int! = 15
  ): CursorPaginatedUsers
  Me: User
  Product(customId: String!): Product
  ProductGroups(
    filter: ProductFilter
    groupBy: ProductGroupBy! = day
    orderBy: ProductOrderBy!
    page: Int! = 1
    perPage: Int! = 15
  ): OffsetPaginatedProductGroups
  Products(
    filter: ProductFilter
    orderBy: ProductOrderBy
    page: Int! = 1
    perPage: Int! = 15
  ): OffsetPaginatedProducts
  RandomProducts(count: Int! = 20, productId: Int! = 0): [SimpleProduct]
  RandomUsers(count: Int! = 20): [SimpleUser]
  SearchedUsers(
    keyword: String! = ""
    page: Int! = 1
    perPage: Int! = 15
  ): OffsetPaginatedSimpleUsers
  Setting: Setting
  Tags: [Tag]
  User(customId: String!): User
  UserProductComments(
    cursor: Int! = 0
    customId: String!
    perPage: Int! = 15
  ): CursorPaginatedComments
  UserVotedProducts(
    cursor: Int! = 0
    customId: String!
    perPage: Int! = 15
  ): CursorPaginatedProducts
  Voters(
    cursor: Int! = 0
    customId: String!
    perPage: Int! = 15
  ): CursorPaginatedUsers
}

type Setting {
  notificationComment: Boolean!
  notificationEmail: Boolean!
  notificationFollow: Boolean!
  notificationVote: Boolean!
}

enum SettingKey {
  NOTIFICATION_COMMENT
  NOTIFICATION_EMAIL
  NOTIFICATION_FOLLOW
  NOTIFICATION_VOTE
}

type SimpleProduct {
  cover: String!
  createdAt: Date!
  customId: String!
  id: Int!
  intro: String!
  logo: String!
  name: String!
  updatedAt: Date!
  views: Int!
  votes: Int!
}

type SimpleUser {
  avatar: String
  cover: String
  createdAt: Date
  customId: String!
  email: String!
  followed: Boolean
  id: Int!
  intro: String
  isMe: Boolean
  name: String
  organization: String
  position: String
}

type SocialMedia {
  id: Int!
  type: String!
  value: String!
}

input SocialMediaUpdateFields {
  type: String!
  value: String!
}

type StatusPayload {
  status: String!
}

type Tag {
  createdAt: Date!
  id: Int!
  name: String!
  updatedAt: Date!
}

type ThirdParty {
  id: Int!
  thirdPartyId: String!
  type: String!
}

enum ThirdPartyType {
  facebook
  google
}

scalar Upload

enum UploadType {
  TMP
  USER_AVATAR
  USER_COVER
}

type UrlPayload {
  url: String!
}

type User {
  avatar: String
  categories: [Category!]!
  cover: String
  createdAt: Date
  customId: String!
  email: String!
  followed: Boolean
  id: Int!
  intro: String
  isMe: Boolean
  name: String
  organization: String
  position: String
  socialMedias: [SocialMedia!]!
  tags: [Tag!]!
  thirdParties: [ThirdParty!]!
  viUserCategorys: [ViUserCategory!]
  viUserTags: [ViUserTag!]
}

input UserUpdateFields {
  avatar: String
  categories: [Int!]
  cover: String
  customId: String
  intro: String
  name: String
  organization: String
  position: String
  socialMedias: [SocialMediaUpdateFields!]
  tags: [Int!]
}

type ViProductCategory {
  category: Category!
  createdAt: Date!
}

type ViProductTag {
  createdAt: Date!
  tag: Tag!
}

type ViUserCategory {
  category: Category!
  createdAt: Date!
}

type ViUserTag {
  createdAt: Date!
  tag: Tag!
}
